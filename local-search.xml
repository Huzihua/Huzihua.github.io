<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>SpringBoot引入Swagger3</title>
    <link href="/blog/2023/02/26/SpringBoot%E5%BC%95%E5%85%A5swagger3/"/>
    <url>/blog/2023/02/26/SpringBoot%E5%BC%95%E5%85%A5swagger3/</url>
    
    <content type="html"><![CDATA[<h3 id="SpringBoot引入Swagger3"><a href="#SpringBoot引入Swagger3" class="headerlink" title="SpringBoot引入Swagger3"></a>SpringBoot引入Swagger3</h3><h3 id="一、引入依赖"><a href="#一、引入依赖" class="headerlink" title="一、引入依赖"></a>一、引入依赖</h3><ul><li><h4 id="引入swagger-3-0"><a href="#引入swagger-3-0" class="headerlink" title="引入swagger 3.0"></a>引入swagger 3.0</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>io.springfox<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>springfox-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><h4 id="引入第三方美化ui"><a href="#引入第三方美化ui" class="headerlink" title="引入第三方美化ui"></a>引入第三方美化ui</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.github.xiaoymin<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>swagger-bootstrap-ui<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.9.6<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ul><h3 id="二、相关配置"><a href="#二、相关配置" class="headerlink" title="二、相关配置"></a>二、相关配置</h3><ul><li><h4 id="application-properties配置是否开启swagger"><a href="#application-properties配置是否开启swagger" class="headerlink" title="application.properties配置是否开启swagger"></a>application.properties配置是否开启swagger</h4><p>生产环境记得将其关闭，不然后果相当严重</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">swagger.enabled</span>=<span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure></li><li><h4 id="JavaConfig配置swagger相关其它属性"><a href="#JavaConfig配置swagger相关其它属性" class="headerlink" title="JavaConfig配置swagger相关其它属性"></a>JavaConfig配置swagger相关其它属性</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.example.service.config;<br><br><br><span class="hljs-keyword">import</span> io.swagger.annotations.ApiOperation;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Value;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Bean;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<br><span class="hljs-keyword">import</span> springfox.documentation.builders.ApiInfoBuilder;<br><span class="hljs-keyword">import</span> springfox.documentation.builders.PathSelectors;<br><span class="hljs-keyword">import</span> springfox.documentation.builders.RequestHandlerSelectors;<br><span class="hljs-keyword">import</span> springfox.documentation.oas.annotations.EnableOpenApi;<br><span class="hljs-keyword">import</span> springfox.documentation.service.ApiInfo;<br><span class="hljs-keyword">import</span> springfox.documentation.service.Contact;<br><span class="hljs-keyword">import</span> springfox.documentation.spi.DocumentationType;<br><span class="hljs-keyword">import</span> springfox.documentation.spring.web.plugins.Docket;<br><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> Polaris</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 1.0</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@description</span>: Swagger配置类</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2023/2/26 20:22</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-meta">@EnableOpenApi</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SwaggerConfig</span> &#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">    * 是否开启Swagger文档功能</span><br><span class="hljs-comment">    */</span><br>    <span class="hljs-meta">@Value(&quot;$&#123;swagger.enabled:&#125;&quot;)</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> swaggerEnabled;<br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> Docket <span class="hljs-title function_">createRestApi</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Docket</span>(DocumentationType.OAS_30)<br>                .apiInfo(apiInfo())<br>                .enable(swaggerEnabled)<br>                .select()<br>                <span class="hljs-comment">// @Api的controller才会被swagger识别</span><br>                .apis(RequestHandlerSelectors.withMethodAnnotation(ApiOperation.class))<br>                <span class="hljs-comment">// PathSelectors.any()代表所有的路径都扫描</span><br>                .paths(PathSelectors.any())<br>                .build();<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> ApiInfo <span class="hljs-title function_">apiInfo</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ApiInfoBuilder</span>()<br>                .title(<span class="hljs-string">&quot;Swagger3接口文档&quot;</span>)<br>                .description(<span class="hljs-string">&quot;demo接口文档&quot;</span>)<br>                <span class="hljs-comment">//作者信息</span><br>                .contact(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Contact</span>(<span class="hljs-string">&quot;Polaris&quot;</span>,<span class="hljs-string">&quot;https://huzihua.github.io/&quot;</span>, <span class="hljs-string">&quot;polaris1202@hotmail.com&quot;</span>))<br>                .version(<span class="hljs-string">&quot;1.0&quot;</span>)<br>                .build();<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure></li></ul><h3 id="三、简单测试"><a href="#三、简单测试" class="headerlink" title="三、简单测试"></a>三、简单测试</h3><ul><li><h4 id="在原来的Controller上面进行添加注解"><a href="#在原来的Controller上面进行添加注解" class="headerlink" title="在原来的Controller上面进行添加注解"></a>在原来的Controller上面进行添加注解</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.example.server.controller;<br><br><span class="hljs-keyword">import</span> io.swagger.annotations.Api;<br><span class="hljs-keyword">import</span> io.swagger.annotations.ApiOperation;<br><span class="hljs-keyword">import</span> org.example.service.dto.NewSysUser;<br><span class="hljs-keyword">import</span> org.example.service.intf.StringTestService;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.*;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> 25677</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 1.0</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@description</span>: 测试</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2023/2/26 0:10</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@Api(tags = &quot;测试&quot;)</span><br><span class="hljs-meta">@RequestMapping(&quot;/test&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">StringTestController</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> StringTestService stringTestService;<br><br>    <span class="hljs-meta">@RequestMapping(value = &quot;/isEmpty/&#123;str&#125;&quot;, method = RequestMethod.GET)</span><br>    <span class="hljs-meta">@ApiOperation(value = &quot;判断字符串是否为空&quot;, notes = &quot;判断字符串是否为空&quot;, httpMethod = &quot;GET&quot;)</span><br>    <span class="hljs-keyword">public</span> Boolean <span class="hljs-title function_">isEmpty</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(name = &quot;str&quot;)</span> String str)</span> &#123;<br>        <span class="hljs-keyword">return</span> stringTestService.isEmpty(str);<br>    &#125;<br><br>    <span class="hljs-meta">@RequestMapping(value = &quot;/insert&quot;, method = RequestMethod.POST)</span><br>    <span class="hljs-meta">@ApiOperation(value = &quot;新增用户&quot;, notes = &quot;新增用户&quot;, httpMethod = &quot;POST&quot;)</span><br>    <span class="hljs-keyword">public</span> Boolean <span class="hljs-title function_">insert</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> NewSysUser newSysUser)</span> &#123;<br>        <span class="hljs-keyword">return</span> stringTestService.insert(newSysUser) == <span class="hljs-number">1</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><h4 id="可能的错误"><a href="#可能的错误" class="headerlink" title="可能的错误"></a>可能的错误</h4></li></ul><p>然后启动的时候，你有可能会遇到<strong>错误</strong>：</p><p><img src="https://typora-hzh.oss-cn-hangzhou.aliyuncs.com/PrivateBlogPic/20230226214238.png" alt="image-20230226214238182" title="错误"></p><p>这是因为swagger3要依赖<strong>spring-plugin-core</strong> 中的 <strong>getPluginFor</strong> 方法，也就是图中框出来的那个方法，这个方法在<strong>spring-plugin-core</strong>的包里面，但是Swagger3对于<strong>spring-plugin-core</strong>的版本依赖最低是2.0.0，而你项目所依赖的<strong>spring-plugin-core</strong>的版本低于2.0.0。</p><p>这是我的pom文件，可以看到<strong>SpringBoot</strong>的版本是<strong>2.1.18.RELEASE</strong></p><p><img src="https://typora-hzh.oss-cn-hangzhou.aliyuncs.com/PrivateBlogPic/image-20230226215905738.png" alt="image-20230226215905738" title="SpringbBoot版本"></p><p>它里面依赖的<strong>spring-plugin-core</strong>版本是<strong>1.2.0.RELEASE</strong>，是低于<strong>2.0.0</strong>版本的</p><p><img src="https://typora-hzh.oss-cn-hangzhou.aliyuncs.com/PrivateBlogPic/20230226220028.png" alt="image-20230226220028728" title="spring-plugin-core"></p><p><img src="https://typora-hzh.oss-cn-hangzhou.aliyuncs.com/PrivateBlogPic/20230226220102.png" alt="image-20230226220102874" title="spring-plugin-core版本"></p><p>直接在idea右边maven管理也能看到项目依赖的<strong>spring-plugin-core</strong>版本是<strong>1.2.0.RELEASE</strong>：</p><p><img src="https://typora-hzh.oss-cn-hangzhou.aliyuncs.com/PrivateBlogPic/20230226221830.png" alt="image-20230226221830691" title="依赖信息"></p><p>解决办法:</p><p>在pom文件的手动指定<strong>spring-plugin</strong>的版本为<strong>2.0.0.RELEASE</strong>：</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stata">&lt;spring-<span class="hljs-keyword">plugin</span>.<span class="hljs-keyword">version</span>&gt;2.0.0.RELEASE&lt;/spring-<span class="hljs-keyword">plugin</span>.<span class="hljs-keyword">version</span>&gt;<br></code></pre></td></tr></table></figure><p>然后重新更新maven依赖重启即可</p><p>在浏览器输入<a href="http://localhost:8080/demo/doc.html">http://localhost:8080/demo/doc.html</a></p><p><strong>”端口“</strong>以及<strong>”server.servlet.context-path“</strong>根据自己程序设置的自行替换。</p><p><img src="https://typora-hzh.oss-cn-hangzhou.aliyuncs.com/PrivateBlogPic/20230226223728.png" alt="image-20230226223728388" title="swagger首页"></p><h3 id="大功告成！"><a href="#大功告成！" class="headerlink" title="大功告成！"></a>大功告成！</h3>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
      <category>SpringBoot</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SpringBoot</tag>
      
      <tag>Swagger</tag>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SpribgBoot引入Mybatis</title>
    <link href="/blog/2023/02/26/SpribgBoot%E5%BC%95%E5%85%A5Mybatis/"/>
    <url>/blog/2023/02/26/SpribgBoot%E5%BC%95%E5%85%A5Mybatis/</url>
    
    <content type="html"><![CDATA[<h2 id="SpribgBoot引入Mybatis"><a href="#SpribgBoot引入Mybatis" class="headerlink" title="SpribgBoot引入Mybatis"></a>SpribgBoot引入Mybatis</h2><p>这里介绍的是在SpringBoot项目中如何最基础的引入Mybatis框架，什么连接池如果你还没有新建SpringBoot项目的话，可以参照<a href="https://huzihua.github.io/2023/02/25/%E6%96%B0%E5%BB%BAmaven%E7%AE%A1%E7%90%86%E7%9A%84%E5%A4%9A%E6%A8%A1%E5%9D%97SpringBoot%E9%A1%B9%E7%9B%AE/">新建maven管理的多模块SpringBoot项目</a>这里来创建一个新的SpringBoot项目。</p><h3 id="一、引入相关依赖"><a href="#一、引入相关依赖" class="headerlink" title="一、引入相关依赖"></a>一、引入相关依赖</h3><ul><li><p>pom文件引入<strong>tkMybatis</strong>依赖，它是Mybatis的拓展，它的配置方式和Mybatsi是完全一致的。它帮我们实现了很多常用的sql语句，使用它可以有效节省我们的sql开发时间。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>tk.mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mapper-spring-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.1.5<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>pom文件引入<strong>Mysql</strong>依赖（这里其实是以Mysql为例子，当然使用别的数据库也是可以的）</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>runtime<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>引入<strong>lombok</strong>依赖，它可以帮省去写琐碎的属性getter()、setter()方法，强烈推荐</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.projectlombok<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>lombok<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ul><h3 id="二、相关配置"><a href="#二、相关配置" class="headerlink" title="二、相关配置"></a>二、相关配置</h3><ul><li><p>数据源配置，直接写在配置文件里</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml">spring.datasource.url=jdbc:mysql://localhost:3306/demo?serverTimezone=GMT%2B8&amp;characterEncoding=utf-8&amp;useSSL=false<br>spring.datasource.username=xxxx<br>spring.datasource.password=xxxxxxx<br>spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver<br></code></pre></td></tr></table></figure></li><li><p>Mybatis配置</p><ul><li><p>启动类配置<strong>Mapper接口</strong>路径</p><p><img src="https://typora-hzh.oss-cn-hangzhou.aliyuncs.com/PrivateBlogPic/20230226164732.png" alt="image-20230226164732333" title="启动类配置Mapper路径"></p></li><li><p>配置文件配置sql的xml文件的路径，这里配置的是resouces文件夹底下的mapper路径</p></li></ul><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">mybatis.mapper-locations</span>=classpath:mapper/*.xml<br></code></pre></td></tr></table></figure></li></ul><p><img src="https://typora-hzh.oss-cn-hangzhou.aliyuncs.com/PrivateBlogPic/20230226164919.png" alt="image-20230226164919829" title="resources底下mapper路径"></p><h3 id="三、书写简单代码"><a href="#三、书写简单代码" class="headerlink" title="三、书写简单代码"></a>三、书写简单代码</h3><h4 id="3-1-使用Mybatis插件生成实体、mapper接口、sql-xml代码"><a href="#3-1-使用Mybatis插件生成实体、mapper接口、sql-xml代码" class="headerlink" title="3.1 使用Mybatis插件生成实体、mapper接口、sql xml代码"></a>3.1 使用Mybatis插件生成实体、mapper接口、sql xml代码</h4><p><img src="https://typora-hzh.oss-cn-hangzhou.aliyuncs.com/PrivateBlogPic/20230226165522.png" alt="image-20230226165522963" title="Mybais插件生成"></p><h4 id="3-2-编写测试代码"><a href="#3-2-编写测试代码" class="headerlink" title="3.2 编写测试代码"></a>3.2 编写测试代码</h4><p>自己新建一个接口以及接口的实现类再简单写一个插入接口即可。</p><ul><li><h5 id="接口方法"><a href="#接口方法" class="headerlink" title="接口方法"></a>接口方法</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">* 插入</span><br><span class="hljs-comment">* <span class="hljs-doctag">@param</span> sysUser 新数据</span><br><span class="hljs-comment">* <span class="hljs-doctag">@author</span> Polaris</span><br><span class="hljs-comment">* <span class="hljs-doctag">@return</span> int</span><br><span class="hljs-comment">* <span class="hljs-doctag">@date</span> 2023/2/26 16:56</span><br><span class="hljs-comment">*/</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">insert</span><span class="hljs-params">(SysUser sysUser)</span>;<br></code></pre></td></tr></table></figure></li><li><h5 id="实现类"><a href="#实现类" class="headerlink" title="实现类"></a>实现类</h5><ul><li><h6 id="引入Mapper接口"><a href="#引入Mapper接口" class="headerlink" title="引入Mapper接口"></a>引入Mapper接口</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Resource</span><br><span class="hljs-keyword">private</span> SysUserMapper sysUserMapper;<br></code></pre></td></tr></table></figure></li><li><h6 id="方法实现"><a href="#方法实现" class="headerlink" title="方法实现"></a>方法实现</h6><p>这里的insertSelective()就是<strong>tkMabatis</strong>已经帮我们实现了的常用接口之一</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">insert</span><span class="hljs-params">(SysUser sysUser)</span> &#123;<br>    <span class="hljs-keyword">return</span> sysUserMapper.insertSelective(sysUser);<br>&#125;<br></code></pre></td></tr></table></figure></li></ul></li><li><h5 id="controller"><a href="#controller" class="headerlink" title="controller"></a>controller</h5><p>请先自行引入service的bean</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(value = &quot;/insert&quot;, method = RequestMethod.POST)</span><br><span class="hljs-keyword">public</span> Boolean <span class="hljs-title function_">insert</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> SysUser sysUser)</span> &#123;<br>    <span class="hljs-keyword">return</span> stringTestService.insert(sysUser) == <span class="hljs-number">1</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="四、测试"><a href="#四、测试" class="headerlink" title="四、测试"></a>四、测试</h3><ul><li><h5 id="postman发送请求"><a href="#postman发送请求" class="headerlink" title="postman发送请求"></a>postman发送请求</h5></li></ul><p><img src="https://typora-hzh.oss-cn-hangzhou.aliyuncs.com/PrivateBlogPic/20230226172200.png" alt="image-20230226172200541" title="postman测试"></p><ul><li><h5 id="数据库查看"><a href="#数据库查看" class="headerlink" title="数据库查看"></a>数据库查看</h5><p><img src="https://typora-hzh.oss-cn-hangzhou.aliyuncs.com/PrivateBlogPic/image-20230226172245820.png" alt="image-20230226172245820" title="数据库查看数据"></p></li></ul><h3 id="大功告成！"><a href="#大功告成！" class="headerlink" title="大功告成！"></a>大功告成！</h3>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
      <category>SpringBoot</category>
      
      <category>Mybatis</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SpringBoot</tag>
      
      <tag>Java</tag>
      
      <tag>Mybatis</tag>
      
      <tag>Mysql</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>新建maven管理的多模块SpringBoot项目</title>
    <link href="/blog/2023/02/25/%E6%96%B0%E5%BB%BAmaven%E7%AE%A1%E7%90%86%E7%9A%84%E5%A4%9A%E6%A8%A1%E5%9D%97SpringBoot%E9%A1%B9%E7%9B%AE/"/>
    <url>/blog/2023/02/25/%E6%96%B0%E5%BB%BAmaven%E7%AE%A1%E7%90%86%E7%9A%84%E5%A4%9A%E6%A8%A1%E5%9D%97SpringBoot%E9%A1%B9%E7%9B%AE/</url>
    
    <content type="html"><![CDATA[<h2 id="新建maven管理的多模块SpringBoot项目"><a href="#新建maven管理的多模块SpringBoot项目" class="headerlink" title="新建maven管理的多模块SpringBoot项目"></a>新建maven管理的多模块SpringBoot项目</h2><h3 id="写在前面："><a href="#写在前面：" class="headerlink" title="写在前面："></a>写在前面：</h3><p>这里介绍的是以一个最简单的Maven开始，SpribgBoot再在后面引入，虽然Idea已经提供了直接引入SpringBoot的maven项目，但是我觉得对于初学者来说，了解一下怎么从零开始引入Springboot也是有必要的。</p><h3 id="一、本机环境介绍："><a href="#一、本机环境介绍：" class="headerlink" title="一、本机环境介绍："></a>一、本机环境介绍：</h3><ul><li>Java 1.8.0_351</li><li>Maven 3.8.6</li><li>Intellij Idea 2023.3.2</li></ul><h3 id="二、开始创建"><a href="#二、开始创建" class="headerlink" title="二、开始创建"></a>二、开始创建</h3><h4 id="2-1-新建项目"><a href="#2-1-新建项目" class="headerlink" title="2.1 新建项目"></a>2.1 新建项目</h4><h5 id="2-1-1-从Idea开始面板开始创建"><a href="#2-1-1-从Idea开始面板开始创建" class="headerlink" title="2.1.1 从Idea开始面板开始创建"></a>2.1.1 从Idea开始面板开始创建</h5><p>如图点击<strong>”New Project“</strong>开始新建一个新的项目</p><p><img src="https://typora-hzh.oss-cn-hangzhou.aliyuncs.com/PrivateBlogPic/20230225002854.png" alt="image-20230225002854378" title="开始面板新建项目"></p><h5 id="2-1-2-右上角开始新建"><a href="#2-1-2-右上角开始新建" class="headerlink" title="2.1.2 右上角开始新建"></a>2.1.2 右上角开始新建</h5><p>如果你进去是已经打开了你上一次的项目的话，可以点击右上角<strong>”File-&gt;New-&gt;Project“</strong>开始新建项目</p><p><img src="https://typora-hzh.oss-cn-hangzhou.aliyuncs.com/PrivateBlogPic/20230225003128.png" alt="image-20230225003128714" title="右上角新建项目"></p><h4 id="2-2-新建一个Maven项目"><a href="#2-2-新建一个Maven项目" class="headerlink" title="2.2 新建一个Maven项目"></a>2.2 新建一个<strong>Maven</strong>项目</h4><p><img src="https://typora-hzh.oss-cn-hangzhou.aliyuncs.com/PrivateBlogPic/20230225003449.png" alt="image-20230225003449216" title="新建Maven项目"></p><ul><li><strong>”Name“</strong>是你新建项目的名字，这个自己定义即可，并无限制。</li><li><strong>”Location“</strong>是你新建项目的父目录，像我这样的话，就会在<strong>“D:\codes\java”</strong>底下新创建一个叫<strong>“demo”</strong>的<strong>Maven项目</strong>了</li><li><strong>”GroupId“</strong>一般自己本地练习项目的话就用默认的即可，实际在公司的时候就填自己公司要求的即可</li></ul><p>然后点击<strong>“create”</strong>就可以创建一个全新的<strong>Maven项目</strong>啦。如图所示：</p><p><img src="https://typora-hzh.oss-cn-hangzhou.aliyuncs.com/PrivateBlogPic/20230225004040.png" alt="image-20230225004040442" title="全新Maven项目"></p><p>可以点击运行这里的<strong>main函数</strong>来看看有没有问题，一般来说能正常打出<strong>“Hello world!”</strong>就是没什么问题的了。</p><h4 id="2-3-清空刚刚新建的项目"><a href="#2-3-清空刚刚新建的项目" class="headerlink" title="2.3 清空刚刚新建的项目"></a>2.3 清空刚刚新建的项目</h4><p>没错，就是要把除了.idea和pom.xml之外的其它文件都删除，.idea不要删除是因为这个只是Intellij Idea打开项目所自动创建的文件，和项目本身并无关系。而pom文件一般来说是要作为多模块项目的父pom来使用的，保留它。删除后就会变成这个样子了：</p><p><img src="https://typora-hzh.oss-cn-hangzhou.aliyuncs.com/PrivateBlogPic/20230225004443.png" alt="image-20230225004443509" title="空的项目"></p><h4 id="2-4-新建子模块"><a href="#2-4-新建子模块" class="headerlink" title="2.4 新建子模块"></a>2.4 新建子模块</h4><p>本示例里面子模块分为<strong>“common”</strong>（通用模块），<strong>“service”</strong>（服务模块，一般是逻辑代码所在），<strong>“server”</strong>（一般是服务端代码所在，供外部调用），这个其实自己按照自己习惯来就行。</p><h5 id="2-4-1-新建common模块"><a href="#2-4-1-新建common模块" class="headerlink" title="2.4.1 新建common模块"></a>2.4.1 新建common模块</h5><p><img src="https://typora-hzh.oss-cn-hangzhou.aliyuncs.com/PrivateBlogPic/20230225004556.png" alt="image-20230225004556821" title="新建模块"></p><p>先点击右上角的<strong>“File-&gt;New-&gt;Module”</strong>来到新建模块的界面</p><p><img src="https://typora-hzh.oss-cn-hangzhou.aliyuncs.com/PrivateBlogPic/20230225004826.png" alt="image-20230225004825974" title="新模块参数"></p><ul><li><strong>“Name”<strong>是子模块的名字，这里是新建</strong>“common模块”</strong>所以是填的<strong>“common”</strong>，当然这个名字是没有限制的，按你的开发习惯来即可。</li><li><strong>“Parent”</strong>是该模块的父项目，在这里就是一开始我新建的<strong>“demo”</strong>项目了</li><li><strong>“GroupId”</strong> 是和父项目保持一致的</li></ul><p>然后同样是点击<strong>“create”</strong>就可以创建<strong>common模块</strong>了。</p><p><img src="https://typora-hzh.oss-cn-hangzhou.aliyuncs.com/PrivateBlogPic/20230225005650.png" alt="image-20230225005649981" title="测试新模块"></p><p>新创建的<strong>common模块</strong>其实和一个单独新建的<strong>maven项目</strong>的目录结构是一模一样的，它同样可以跑一下<strong>main方法</strong>来看看有没有什么问题。</p><p>查看子模块的pom文件你会在里面看到本模块所依赖的父项目的信息，包裹在&lt;parent&gt;标签里面。</p><p><img src="https://typora-hzh.oss-cn-hangzhou.aliyuncs.com/PrivateBlogPic/20230225005915.png" alt="image-20230225005914965" title="子模块pom"></p><p>同样地，你也可以查看父项目的pom文件，也可以在里面看到它所有子模块的信息，全部都会包裹在&lt;modules&gt;标签里面</p><p><img src="https://typora-hzh.oss-cn-hangzhou.aliyuncs.com/PrivateBlogPic/20230225010108.png" alt="image-20230225010108811" title="父项目pom文件"></p><h4 id="2-4-2-新建service模块"><a href="#2-4-2-新建service模块" class="headerlink" title="2.4.2 新建service模块"></a>2.4.2 新建service模块</h4><p>重复2.4.1即可</p><h4 id="2-4-3-新建server模块"><a href="#2-4-3-新建server模块" class="headerlink" title="2.4.3 新建server模块"></a>2.4.3 新建server模块</h4><p>重复2.4.1即可</p><p>最后的项目结构如图所示：</p><p><img src="https://typora-hzh.oss-cn-hangzhou.aliyuncs.com/PrivateBlogPic/20230225010456.png" alt="image-20230225010456445" title="多模块项目结构"></p><h4 id="2-4-4-进行精简以及模块依赖"><a href="#2-4-4-进行精简以及模块依赖" class="headerlink" title="2.4.4 进行精简以及模块依赖"></a>2.4.4 进行精简以及模块依赖</h4><p>新建的每一个模块都是完整的一个maven项目，也就是会有多个启动类，但是一般我们一个项目里面只会有一个启动类，所以我们只需要<strong>server模块</strong>的启动类即可，其他的可以删掉。然后，我们还可以给<strong>server模块</strong>的启动类改个名字，这样会更符合规范（启动类以<strong>“Application”</strong>结尾），也更清晰，如这里我改成了<strong>“DemoApplication”</strong>。而且这里推荐一点的是，每个子模块都再在<strong>“org.example”</strong>底下新建一个自己模块名字命名的文件夹，这样项目结构就会清晰很多。</p><p>最后精简后的多模块项目的雏形就是这样的了。</p><p><img src="https://typora-hzh.oss-cn-hangzhou.aliyuncs.com/PrivateBlogPic/20230225011235.png" alt="image-20230225011235301" title="精简后的项目结构"></p><h3 id="三、简单填充各模块"><a href="#三、简单填充各模块" class="headerlink" title="三、简单填充各模块"></a>三、简单填充各模块</h3><p>三个模块是建好了，但是现在的模块里面都是空的，或许也会有人会疑惑为什么要分模块，意义在哪。别急，接下来我们就要往各个模块里面填充内容了。</p><h4 id="3-1-common通用模块"><a href="#3-1-common通用模块" class="headerlink" title="3.1 common通用模块"></a>3.1 common通用模块</h4><p>一般来说，<strong>common模块</strong>里面主要存放的是整个项目的通用类型的代码。如一些很多地方都要用到的常量类、又如一些经常使用到的工具类方法。</p><p>如图所示，举个例子，我在这个模块里面新建了一个常量类和两个工具类。</p><p><img src="https://typora-hzh.oss-cn-hangzhou.aliyuncs.com/PrivateBlogPic/20230226000214.png" alt="image-20230226000214347" title="common模块"></p><h4 id="3-2-server服务端模块"><a href="#3-2-server服务端模块" class="headerlink" title="3.2 server服务端模块"></a>3.2 server服务端模块</h4><p>既然server模块是作为服务端模块，自然地springboot的启动类以及配置文件就应该放在这个模块底下。</p><h5 id="3-2-1-引入Springboot和基本配置文件"><a href="#3-2-1-引入Springboot和基本配置文件" class="headerlink" title="3.2.1 引入Springboot和基本配置文件"></a>3.2.1 引入Springboot和基本配置文件</h5><p>首先在父pom模块引入springBoot-starter-parenter的父依赖，我这里使用的是2.1.18.RELEASE版本</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">parent</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.1.18.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span><br></code></pre></td></tr></table></figure><p>这个依赖其实又是继承了<strong>spring-boot-dependencies</strong>的父pom，除此之外增加了一些额外的特性，如统一一些依赖的默认版本，设置默认编码是“UTF-8”，识别resources文件等。这些对于我们的开发是提供了一定的便利性的。</p><h5 id="3-2-2-引入”spring-boot-starter-web”"><a href="#3-2-2-引入”spring-boot-starter-web”" class="headerlink" title="3.2.2 引入”spring-boot-starter-web”"></a>3.2.2 引入”spring-boot-starter-web”</h5><p>继续在父pom引进，这个依赖可以给我们提供Web开发场景所需的底层依赖。没有这个的话，很多web开发的依赖你都需要自己一一去引进来。就好像Spring Boot应用一般都是跑在Tomcat上的，但是你好像从来没有手动引入过Tomcat的相关依赖，其实”spring-boot-starter-web”就已经帮我们做了这个事情。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h5 id="3-2-3-新建配置文件"><a href="#3-2-3-新建配置文件" class="headerlink" title="3.2.3 新建配置文件"></a>3.2.3 新建配置文件</h5><p>在server模块底下的src.main.resource底下右键，<strong>“File-&gt;Resource Bundle”</strong>，然后填入<strong>“application”</strong>点击“OK”即可创建一个新的空白的配置文件了。</p><p><img src="https://typora-hzh.oss-cn-hangzhou.aliyuncs.com/PrivateBlogPic/20230225174915.png" alt="image-20230225174915858" title="新建配置文件"></p><p><img src="https://typora-hzh.oss-cn-hangzhou.aliyuncs.com/PrivateBlogPic/20230225175135.png" alt="image-20230225175135805" title="新建配置文件"></p><p>然后先往里面填入一些基本SpringBoot的配置信息即可。</p><ul><li> “server.servlet.context-path”：指定的是对外接口的前缀</li><li> “server.port”：是该SpringBoot应用的端口，这里不固定，你填5050、6060都可以</li></ul><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">server.servlet.context-path</span>=/demo<br><span class="hljs-attr">server.port</span>=<span class="hljs-number">8080</span><br></code></pre></td></tr></table></figure><h5 id="3-2-4-修改启动类"><a href="#3-2-4-修改启动类" class="headerlink" title="3.2.4 修改启动类"></a>3.2.4 修改启动类</h5><p>看看你的启动类，你会发现这里还是打印“Hello World!”。并不是SpringBoot的启动方式。所以要修改以下，引入“@SpringBootApplication”注解在启动类，然后main方法修改如下，这样才是正确的启动SpringBoot程序的方式之一：</p><p><img src="https://typora-hzh.oss-cn-hangzhou.aliyuncs.com/PrivateBlogPic/20230225174420.png" alt="image-20230225174419981" title="SpringBoot启动类"></p><p>然后启动SpringBoot即可看到SpringBoot正常启动的日志了。</p><h4 id="3-3-service服务模块"><a href="#3-3-service服务模块" class="headerlink" title="3.3 service服务模块"></a>3.3 service服务模块</h4><p>作为服务模块，这里就简单写一个最简单的接口服务作为实例。</p><h5 id="3-3-1-编写测试接口"><a href="#3-3-1-编写测试接口" class="headerlink" title="3.3.1 编写测试接口"></a>3.3.1 编写测试接口</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.example.service.intf;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 示例接口</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> 25677</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">StringTestService</span> &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 判断字符串是否是空</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> str 目标字符串</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 结果</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-type">boolean</span> <span class="hljs-title function_">isEmpty</span><span class="hljs-params">(String str)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="3-3-4-编写测试接口的业务代码"><a href="#3-3-4-编写测试接口的业务代码" class="headerlink" title="3.3.4 编写测试接口的业务代码"></a>3.3.4 编写测试接口的业务代码</h5><p>这里用到了<strong>common模块</strong>的<strong>StringUtils</strong>工具类，如果Idea自己找不到的话，可能需要自己到service的pom里面把<strong>common模块</strong>作为依赖给引进来。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.example<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>common<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>compile<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.example.service.impl;<br><br><span class="hljs-keyword">import</span> org.example.common.utils.StringUtils;<br><span class="hljs-keyword">import</span> org.example.service.intf.StringTestService;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> 25677</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 1.0</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@description</span>: TODO</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2023/2/25 23:57</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">StringTestImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">StringTestService</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isEmpty</span><span class="hljs-params">(String str)</span> &#123;<br>        <span class="hljs-keyword">return</span> StringUtils.isEmpty(str);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="四、测试"><a href="#四、测试" class="headerlink" title="四、测试"></a>四、测试</h3><h4 id="4-1-引进service模块"><a href="#4-1-引进service模块" class="headerlink" title="4.1 引进service模块"></a>4.1 引进service模块</h4><p>在server的pom文件里面引入service的依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.example<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>service<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>compile<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="4-2-编写测试Controller"><a href="#4-2-编写测试Controller" class="headerlink" title="4.2 编写测试Controller"></a>4.2 编写测试Controller</h4><p>首先需要在启动类指定自动装置bean的路径才行，不然别的模块的 bean它会找不到。这样的路径其实是三个总模块的父路径，所以整个项目的bean就都可以被SpringBoot自动装载管理了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SpringBootApplication(scanBasePackages = &quot;org.example&quot;)</span><br></code></pre></td></tr></table></figure><p>在启动类同级目录下新建一个controller文件夹，然后在文件夹里面自己新建一个测试用的controller类。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.example.server.controller;<br><br><span class="hljs-keyword">import</span> org.example.service.intf.StringTestService;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.*;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> 25677</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 1.0</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@description</span>: TODO</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2023/2/26 0:10</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping(&quot;/test&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">StringTestController</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> StringTestService stringTestService;<br><br>    <span class="hljs-meta">@RequestMapping(value = &quot;/isEmpty/&#123;str&#125;&quot;, method = RequestMethod.GET)</span><br>    <span class="hljs-keyword">public</span> Boolean <span class="hljs-title function_">isEmpty</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(name = &quot;str&quot;)</span> String str)</span> &#123;<br>        <span class="hljs-keyword">return</span> stringTestService.isEmpty(str);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="4-3-Postman测试"><a href="#4-3-Postman测试" class="headerlink" title="4.3 Postman测试"></a>4.3 Postman测试</h4><p><img src="https://typora-hzh.oss-cn-hangzhou.aliyuncs.com/PrivateBlogPic/20230226003748.png" alt="image-20230226003748733" title="Postman测试"></p><h3 id="五、大功告成"><a href="#五、大功告成" class="headerlink" title="五、大功告成"></a>五、大功告成</h3><p>至此一个最简陋的的基于Maven管理的多模块的SpringBoot项目就算搭建完成了。在这个过程中更多的其实是体会maven的管理，以及子模块之间的如何进行协作。</p>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
      <category>SpringBoot</category>
      
      <category>Maven</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SpringBoot</tag>
      
      <tag>Java</tag>
      
      <tag>Intellij Idea</tag>
      
      <tag>多模块</tag>
      
      <tag>Maven</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Typora通过PicGo上传图片自动添加水印</title>
    <link href="/blog/2023/02/23/Typora%E9%80%9A%E8%BF%87PicGo%E4%B8%8A%E4%BC%A0%E5%9B%BE%E7%89%87%E8%87%AA%E5%8A%A8%E6%B7%BB%E5%8A%A0%E6%B0%B4%E5%8D%B0/"/>
    <url>/blog/2023/02/23/Typora%E9%80%9A%E8%BF%87PicGo%E4%B8%8A%E4%BC%A0%E5%9B%BE%E7%89%87%E8%87%AA%E5%8A%A8%E6%B7%BB%E5%8A%A0%E6%B0%B4%E5%8D%B0/</url>
    
    <content type="html"><![CDATA[<h2 id="Typora通过PicGo上传图片自动添加水印"><a href="#Typora通过PicGo上传图片自动添加水印" class="headerlink" title="Typora通过PicGo上传图片自动添加水印"></a>Typora通过PicGo上传图片自动添加水印</h2><p>给图片添加水印可能有的人会觉得是多此一举，不仅没必要还影响到了图片的观看。但是我觉得21世纪的人还是要有一点原创精神在，至少在博客圈子里面不要直接就搬运人家的图片甚至直接copy博客。所以这里就介绍一下如何在Typora上面通过PicGo上传图片到图床的过程中自动给图片加上自定义水印。</p><h3 id="一、先配置好Typora自动通过PicGo上传图片"><a href="#一、先配置好Typora自动通过PicGo上传图片" class="headerlink" title="一、先配置好Typora自动通过PicGo上传图片"></a>一、先配置好Typora自动通过PicGo上传图片</h3><p>可以自行到这个<a href="https://huzihua.github.io/2023/02/20/Typora%E9%85%8D%E7%BD%AE%E9%98%BF%E9%87%8C%E4%BA%91OSS%E5%9B%BE%E5%BA%8A/">博文</a>里进行参考</p><h3 id="二、在PicGo安装WaterMark插件"><a href="#二、在PicGo安装WaterMark插件" class="headerlink" title="二、在PicGo安装WaterMark插件"></a>二、在PicGo安装WaterMark插件</h3><p>打开PicGo软件，打开“插件设置”</p><p><img src="https://typora-hzh.oss-cn-hangzhou.aliyuncs.com/PrivateBlogPic/20230223221141.png" alt="image-20230223221141967" title="PicGo"></p><p>然后直接搜索“watermark”然后进行安装即可，有时会出现安装失败的情况，这个时候多安装几次应该就可以。</p><p>安装完成后就进行水印的相关参数设置，如图所示，打开插件的设置面板</p><p><img src="https://typora-hzh.oss-cn-hangzhou.aliyuncs.com/PrivateBlogPic/20230223221155.png" alt="image-20230223221154995" title="PicGo插件管理"></p><p>安装提示进行填写即可。</p><ul><li>其中的“字体文件路径”和“水印图片路径”是选填。只有当你的水印文字是中文的时候你才需要设置字体文件路径，windows用户的文字路径统一在“C:\Windows\Fonts”底下，右键查看属性可以看到字体文件的名字（一般是.TTF结尾），复制你想要的字体文件的绝对路径即可。</li></ul><p><img src="https://typora-hzh.oss-cn-hangzhou.aliyuncs.com/PrivateBlogPic/20230223221250.png" alt="image-20230223221250706" title="水印属性配置"></p><p><img src="https://typora-hzh.oss-cn-hangzhou.aliyuncs.com/PrivateBlogPic/20230223221227.png" alt="image-20230223221227160" title="字体选择"></p><ul><li><p>对于水印文字颜色不太懂怎么获取的，可以到<a href="https://c.runoob.com/front-end/6214/#2c5d5f">菜鸟工具的取色器</a>简单获取</p></li><li><p>水印位置可以自行选择：</p></li></ul><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs vim">默认是（rb）<br>rb 右下角<br><br><span class="hljs-keyword">lt</span>：左上<br><br>ct：中上<br><br>rt：右上<br><br><span class="hljs-keyword">lm</span>：左中<br><br><span class="hljs-keyword">cm</span>：正中间<br><br>rm：右中<br><br><span class="hljs-keyword">lb</span>：左下<br><br><span class="hljs-keyword">cb</span>：中下<br></code></pre></td></tr></table></figure><p>水印图片路径是针对你的水印是图片类型才需要设置，文字水印是可以忽略的，而且必须说明的是图片水印的优先级是高于文字水印的。</p><p>配置完成后点击确定即可。</p><p>三、补充：</p><ul><li>这篇博文的所有图片的右下角的水印都是通过以上方式设置自动添加的。</li><li>水印的字体以及颜色、大小都可以自行慢慢调整以达到自己满意的要求。</li></ul><h3 id="大功告成！"><a href="#大功告成！" class="headerlink" title="大功告成！"></a>大功告成！</h3>]]></content>
    
    
    <categories>
      
      <category>配置</category>
      
      <category>其它</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Typora</tag>
      
      <tag>水印</tag>
      
      <tag>PicGo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>国内注册ChatGPT</title>
    <link href="/blog/2023/02/21/%E5%9B%BD%E5%86%85%E6%B3%A8%E5%86%8CChatGPT/"/>
    <url>/blog/2023/02/21/%E5%9B%BD%E5%86%85%E6%B3%A8%E5%86%8CChatGPT/</url>
    
    <content type="html"><![CDATA[<h2 id="国内从零开始注册ChatGPT"><a href="#国内从零开始注册ChatGPT" class="headerlink" title="国内从零开始注册ChatGPT"></a>国内从零开始注册ChatGPT</h2><p>说在前面，这个得要科学上网，懂得都懂。发现网页打不开时建议先检查一下自己的网络问题。不过有时网页打不开也可能是OpenAI那边崩了，毕竟使用的人数太多了，这种情况下可以挑一个比较阴间的时间再去注册，避开使用高峰。</p><h3 id="1-到OpenAI官网使用邮箱注册"><a href="#1-到OpenAI官网使用邮箱注册" class="headerlink" title="1. 到OpenAI官网使用邮箱注册"></a>1. 到OpenAI官网使用邮箱注册</h3><h4 id="1-1-先到OpenAI官网，然后滑到最底下点击“Log-In”按钮就会跳转到注册登录界面。"><a href="#1-1-先到OpenAI官网，然后滑到最底下点击“Log-In”按钮就会跳转到注册登录界面。" class="headerlink" title="1.1 先到OpenAI官网，然后滑到最底下点击“Log In”按钮就会跳转到注册登录界面。"></a>1.1 先到<a href="https://openai.com/">OpenAI官网</a>，然后滑到最底下点击“Log In”按钮就会跳转到注册登录界面。</h4><p><img src="https://typora-hzh.oss-cn-hangzhou.aliyuncs.com/PrivateBlogPic/image-20230221232907045.png" alt="image-20230221232907045" title="OpenAI官网"></p><h4 id="1-2-然后点击“Sign-Up”跳转到注册界面"><a href="#1-2-然后点击“Sign-Up”跳转到注册界面" class="headerlink" title="1.2 然后点击“Sign Up”跳转到注册界面"></a>1.2 然后点击“Sign Up”跳转到注册界面</h4><p><img src="https://typora-hzh.oss-cn-hangzhou.aliyuncs.com/PrivateBlogPic/image-20230221232941101.png" alt="image-20230221232941101" title="OpenAI注册"></p><h4 id="1-3-之后就输入你的邮箱，邮箱后缀并不限定，实测QQ邮箱也能注册成功。然后点击“continue”"><a href="#1-3-之后就输入你的邮箱，邮箱后缀并不限定，实测QQ邮箱也能注册成功。然后点击“continue”" class="headerlink" title="1.3 之后就输入你的邮箱，邮箱后缀并不限定，实测QQ邮箱也能注册成功。然后点击“continue”"></a>1.3 之后就输入你的邮箱，邮箱后缀并不限定，实测QQ邮箱也能注册成功。然后点击“continue”</h4><p><img src="https://typora-hzh.oss-cn-hangzhou.aliyuncs.com/PrivateBlogPic/image-20230221233054905.png" alt="image-20230221233054905" title="输入邮箱"></p><h4 id="1-4-常规设置密码步骤"><a href="#1-4-常规设置密码步骤" class="headerlink" title="1.4 常规设置密码步骤"></a>1.4 常规设置密码步骤</h4><p><img src="https://typora-hzh.oss-cn-hangzhou.aliyuncs.com/PrivateBlogPic/image-20230221233146126.png" alt="image-20230221233146126" title="设置密码"></p><h4 id="1-5-之后会出现人机验证（人机验证会经常出现在你使用ChatGPT的过程中）"><a href="#1-5-之后会出现人机验证（人机验证会经常出现在你使用ChatGPT的过程中）" class="headerlink" title="1.5 之后会出现人机验证（人机验证会经常出现在你使用ChatGPT的过程中）"></a>1.5 之后会出现人机验证（人机验证会经常出现在你使用ChatGPT的过程中）</h4><p><img src="https://typora-hzh.oss-cn-hangzhou.aliyuncs.com/PrivateBlogPic/image-20230221233245571.png" alt="image-20230221233245571" title="人机验证"></p><h4 id="1-6-点击邮箱进行验证"><a href="#1-6-点击邮箱进行验证" class="headerlink" title="1.6 点击邮箱进行验证"></a>1.6 点击邮箱进行验证</h4><p>设置完密码点击“continue”后等待OpenAI官方的验证邮箱，收到然后点击图中绿色按钮验证即可。</p><p><img src="https://typora-hzh.oss-cn-hangzhou.aliyuncs.com/PrivateBlogPic/image-20230221233858934.png" alt="image-20230221233858934" title="邮箱验证"></p><h4 id="1-7-回到登录界面继续注册"><a href="#1-7-回到登录界面继续注册" class="headerlink" title="1.7 回到登录界面继续注册"></a>1.7 回到登录界面继续注册</h4><p>重新输入邮箱密码后会来到注册个人基本信息界面</p><p><img src="https://typora-hzh.oss-cn-hangzhou.aliyuncs.com/PrivateBlogPic/image-20230221235846889.png" alt="image-20230221235846889" title="个人基本信息"></p><p>这里的信息随便填即可，其中机构名称是选填。</p><h4 id="1-8-输入手机号接收短信进行验证"><a href="#1-8-输入手机号接收短信进行验证" class="headerlink" title="1.8 输入手机号接收短信进行验证"></a>1.8 输入手机号接收短信进行验证</h4><p>来到这个界面的时候我们就离成功不远了。遗憾的国内的手机号是不支持的，所以我们需要找到一个可以接收短信的外国手机号。</p><p><img src="https://typora-hzh.oss-cn-hangzhou.aliyuncs.com/PrivateBlogPic/image-20230222000002039.png" alt="image-20230222000002039" title="手机号验证"></p><h3 id="2-获取外国短信"><a href="#2-获取外国短信" class="headerlink" title="2. 获取外国短信"></a>2. 获取外国短信</h3><p>获取短信你可以使用自己本身的外国手机号，前提是你有。或者你认识别人有也可以他们借一个。</p><p>这里提供的方法是自行购买一个临时可以接收短信的外国手机号。</p><h4 id="2-1-到sms-activate官网注册"><a href="#2-1-到sms-activate官网注册" class="headerlink" title="2.1 到sms-activate官网注册"></a>2.1 到sms-activate官网注册</h4><p>到<a href="https://sms-activate.org/cn">sms-activate</a>进行注册，可以在右上角选择中国切换中文更方便一点。</p><p><img src="https://typora-hzh.oss-cn-hangzhou.aliyuncs.com/PrivateBlogPic/image-20230221234357837.png" alt="image-20230221234357837" title="sms-activate官网"></p><h4 id="2-2-常规注册"><a href="#2-2-常规注册" class="headerlink" title="2.2 常规注册"></a>2.2 常规注册</h4><p><img src="https://typora-hzh.oss-cn-hangzhou.aliyuncs.com/PrivateBlogPic/image-20230221234435139.png" alt="image-20230221234435139" title="注册"></p><h4 id="2-3-充值"><a href="#2-3-充值" class="headerlink" title="2.3 充值"></a>2.3 充值</h4><p>点击右上角“余额”下面的“充值”</p><p><img src="https://typora-hzh.oss-cn-hangzhou.aliyuncs.com/PrivateBlogPic/image-20230221234517063.png" alt="image-20230221234517063" title="充值"></p><p>然后滑到底下选择“支付宝”方式</p><p><img src="https://typora-hzh.oss-cn-hangzhou.aliyuncs.com/PrivateBlogPic/image-20230221234614190.png" alt="image-20230221234614190" title="支付宝充值"></p><p>最低都是充值一美元，所以就选择一美元进行充值，约等于7块钱人民币。点击“支付”会跳转到支付宝二维码界面，扫码支付即可。需要注意的是余额显示会存在一定延迟，但是一般不会影响你正常接下来的购买。</p><p><img src="https://typora-hzh.oss-cn-hangzhou.aliyuncs.com/PrivateBlogPic/image-20230221234707269.png" alt="image-20230221234707269" title="支付宝充值"></p><h4 id="2-4-购买手机号"><a href="#2-4-购买手机号" class="headerlink" title="2.4 购买手机号"></a>2.4 购买手机号</h4><p>点击左方列表里面的“OpenAI”选项</p><p><img src="https://typora-hzh.oss-cn-hangzhou.aliyuncs.com/PrivateBlogPic/image-20230221234938833.png" alt="image-20230221234938833" title="OpenAI选项"></p><p>然后选择一个国家的就行，一般来说印度尼西亚是比较便宜的，也是比较推荐的。然后点击其右方的购物车按钮就会自动进行购买了，无需再确认。</p><p><img src="https://typora-hzh.oss-cn-hangzhou.aliyuncs.com/PrivateBlogPic/image-20230221235102317.png" alt="image-20230221235102317" title="购买印度尼西亚"></p><p>购买成功后，首页会出现你刚刚购买的号码，以及它的状态是“等待短信”。这里又要说明一下，这个网站所购买的手机号在没有收到短信之前（激活前）你是可以点击右方的“X”按钮进行退款的。换句话说，你所购买的号码不激活不收钱，你完全可以退了没激活的号码再重新购买一个新号码。</p><p>值得一提的是，每个手机号都是有存活时间的，建议购买后及时使用。</p><p><img src="https://typora-hzh.oss-cn-hangzhou.aliyuncs.com/PrivateBlogPic/image-20230221235305964.png" alt="image-20230221235305964" title="购买的号码"></p><h4 id="2-5-短信验证"><a href="#2-5-短信验证" class="headerlink" title="2.5 短信验证"></a>2.5 短信验证</h4><p>复制这个手机号码，注意：+62后面的是不需要的，因为这是印度尼西亚地区手机号的通用前缀，和我们的+86其实是差不多的。OpenAI那边输入手机号的时候也是会自带地区前缀的。</p><p>复制手机号到OpenAI的手机号输入框</p><p><img src="https://typora-hzh.oss-cn-hangzhou.aliyuncs.com/PrivateBlogPic/image-20230222000153318.png" alt="image-20230222000153318" title="输入手机号"></p><p>然后在Do you have WhatsApp? 那里选择“否”，之后再点击 “Send Code via SMS”即可发送短信。</p><p><img src="https://typora-hzh.oss-cn-hangzhou.aliyuncs.com/PrivateBlogPic/image-20230222000246873.png" alt="image-20230222000246873" title="发送短信"></p><p>若是发送短信失败，如下图中出现了红色提示就说明短信发送不成功，你可以到sms-activate短信网站把失败的手机号码退款重新购买一个新的手机号。</p><p>然后重复之前的步骤直到成功发送短信即可。</p><p><img src="https://typora-hzh.oss-cn-hangzhou.aliyuncs.com/PrivateBlogPic/image-20230222000752041.png" alt="image-20230222000752041" title="发送短信失败"></p><p>短信接收成功的话会在这里出现，看不到可以多刷新几遍，应该就能看到你所购买的手机号所接收到的SMS code</p><p><img src="https://typora-hzh.oss-cn-hangzhou.aliyuncs.com/PrivateBlogPic/image-20230222003014619.png" alt="image-20230222003014619" title="接收短信成功"></p><p>然后复制到这里就完成注册了。</p><p><img src="https://typora-hzh.oss-cn-hangzhou.aliyuncs.com/PrivateBlogPic/image-20230222001549240.png" title="复制SMS Code到这里"></p><h3 id="3-使用ChatGPT"><a href="#3-使用ChatGPT" class="headerlink" title="3. 使用ChatGPT"></a>3. 使用ChatGPT</h3><p>回到OpenAI官网输入刚刚注册的邮箱和密码进行登录，然后点击这里来打ChatGPT的网页。</p><p><img src="https://typora-hzh.oss-cn-hangzhou.aliyuncs.com/PrivateBlogPic/image-20230222003358820.png" alt="image-20230222003358820" title="来到ChatGPT"></p><p>点击会跳转到这里</p><p><img src="https://typora-hzh.oss-cn-hangzhou.aliyuncs.com/PrivateBlogPic/image-20230222002616780.png" alt="image-20230222002616780" title="使用ChatGPT"></p><p>接下来就可以愉快的和ChatGPT进行聊天了。</p><h3 id="4-大功告成！"><a href="#4-大功告成！" class="headerlink" title="4. 大功告成！"></a>4. 大功告成！</h3>]]></content>
    
    
    <categories>
      
      <category>配置</category>
      
      <category>其它</category>
      
    </categories>
    
    
    <tags>
      
      <tag>OpenAI</tag>
      
      <tag>ChatGPT</tag>
      
      <tag>AI</tag>
      
      <tag>智能对话</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Typora配置阿里云OSS图床</title>
    <link href="/blog/2023/02/20/Typora%E9%85%8D%E7%BD%AE%E9%98%BF%E9%87%8C%E4%BA%91OSS%E5%9B%BE%E5%BA%8A/"/>
    <url>/blog/2023/02/20/Typora%E9%85%8D%E7%BD%AE%E9%98%BF%E9%87%8C%E4%BA%91OSS%E5%9B%BE%E5%BA%8A/</url>
    
    <content type="html"><![CDATA[<h3 id="1-安装Typora"><a href="#1-安装Typora" class="headerlink" title="1.安装Typora"></a>1.安装Typora</h3><p>请到<a href="https://typoraio.cn/">Typora官网</a>自行下载，然后傻瓜式安装就行。</p><h3 id="2-安装PicGo"><a href="#2-安装PicGo" class="headerlink" title="2.安装PicGo"></a>2.安装PicGo</h3><p>请到<a href="https://github.com/Molunerfinn/PicGo/releases">PicGo的github地址</a>，如果因为某些原因github速度很慢的话，也可以到<a href="https://mirrors.sdu.edu.cn/github-release/Molunerfinn_PicGo">山东大学的镜像站</a>选择自己喜欢的版本进行下载，然后傻瓜式安装就行，需要记下安装路径，后面需要用到。值得一提的是图床软件PicGo可以帮我们自动管理图片的上传，这样图片就可以不依赖于本地了，图片也就能被外网访问到了。</p><p>软件界面长这样</p><p><img src="https://typora-hzh.oss-cn-hangzhou.aliyuncs.com/PrivateBlogimage-20230221001629395.png" alt="image-20230221001629395" title="PicGo图片"></p><h3 id="3-配置阿里云的OSS服务，请先自己购买一个"><a href="#3-配置阿里云的OSS服务，请先自己购买一个" class="headerlink" title="3.配置阿里云的OSS服务，请先自己购买一个"></a>3.配置阿里云的OSS服务，请先自己购买一个</h3><h4 id="3-1创建bucket（或者使用你原有的bucket）这个请自行判断。新建bucket的话点击下图位置进行新建。"><a href="#3-1创建bucket（或者使用你原有的bucket）这个请自行判断。新建bucket的话点击下图位置进行新建。" class="headerlink" title="3.1创建bucket（或者使用你原有的bucket）这个请自行判断。新建bucket的话点击下图位置进行新建。"></a>3.1创建bucket（或者使用你原有的bucket）这个请自行判断。新建bucket的话点击下图位置进行新建。</h4><p><img src="https://typora-hzh.oss-cn-hangzhou.aliyuncs.com/PrivateBlogimage-20230221000650138.png" alt="image-20230221000650138" title="创建Bucket"></p><p>需要注意是”读写权限“选择”公共读“，不然无法访问你上传到OSS的图片。</p><h4 id="3-2在Bucket创建一个文件夹存放上传的图片（推荐但不是必需，自行判断）"><a href="#3-2在Bucket创建一个文件夹存放上传的图片（推荐但不是必需，自行判断）" class="headerlink" title="3.2在Bucket创建一个文件夹存放上传的图片（推荐但不是必需，自行判断）"></a>3.2在Bucket创建一个文件夹存放上传的图片（推荐但不是必需，自行判断）</h4><p><img src="https://typora-hzh.oss-cn-hangzhou.aliyuncs.com/PrivateBlogimage-20230221002451244.png" alt="image-20230221002451244" title="Bucket新建目录"></p><h4 id="3-3记录Bucket的”地域节点“，后面PicGo配置OSS的时候会用到"><a href="#3-3记录Bucket的”地域节点“，后面PicGo配置OSS的时候会用到" class="headerlink" title="3.3记录Bucket的”地域节点“，后面PicGo配置OSS的时候会用到"></a>3.3记录Bucket的”地域节点“，后面PicGo配置OSS的时候会用到</h4><h5 id="3-3-1点击Bucket底下的”概览“按钮"><a href="#3-3-1点击Bucket底下的”概览“按钮" class="headerlink" title="3.3.1点击Bucket底下的”概览“按钮"></a>3.3.1点击Bucket底下的”概览“按钮</h5><p><img src="https://typora-hzh.oss-cn-hangzhou.aliyuncs.com/PrivateBlogimage-20230221001805150.png" alt="image-20230221001805150" title="Bucket概览"></p><h5 id="3-3-2记录”地域节点“"><a href="#3-3-2记录”地域节点“" class="headerlink" title="3.3.2记录”地域节点“"></a>3.3.2记录”地域节点“</h5><p><img src="https://typora-hzh.oss-cn-hangzhou.aliyuncs.com/PrivateBlogimage-20230221001858895.png" alt="image-20230221001858895" title="Bucket地域节点"></p><p>后面.aliyuncs.com是不需要的</p><h4 id="3-4创建OSS的ACCESS凭证"><a href="#3-4创建OSS的ACCESS凭证" class="headerlink" title="3.4创建OSS的ACCESS凭证"></a>3.4创建OSS的ACCESS凭证</h4><h5 id="3-4-1鼠标移动至阿里云头像处，然后点击AccessKey管理"><a href="#3-4-1鼠标移动至阿里云头像处，然后点击AccessKey管理" class="headerlink" title="3.4.1鼠标移动至阿里云头像处，然后点击AccessKey管理"></a>3.4.1鼠标移动至阿里云头像处，然后点击AccessKey管理</h5><p><img src="https://typora-hzh.oss-cn-hangzhou.aliyuncs.com/PrivateBlogimage-20230221002046802.png" alt="image-20230221002046802" title="AccessKey管理"></p><h5 id="3-4-2点击”继续使用AccessKey“"><a href="#3-4-2点击”继续使用AccessKey“" class="headerlink" title="3.4.2点击”继续使用AccessKey“"></a>3.4.2点击”继续使用AccessKey“</h5><p><img src="https://typora-hzh.oss-cn-hangzhou.aliyuncs.com/PrivateBlogimage-20230221002139574.png" alt="image-20230221002139574" title="继续使用AccessKey"></p><h5 id="3-3-3创建新的AccessKey，并且记录下来，后面会用到"><a href="#3-3-3创建新的AccessKey，并且记录下来，后面会用到" class="headerlink" title="3.3.3创建新的AccessKey，并且记录下来，后面会用到"></a>3.3.3创建新的AccessKey，并且记录下来，后面会用到</h5><p><img src="https://typora-hzh.oss-cn-hangzhou.aliyuncs.com/PrivateBlogimage-20230221002203999.png" alt="image-20230221002203999" title="创建AccessKey"></p><h3 id="4-PicGo配置OSS"><a href="#4-PicGo配置OSS" class="headerlink" title="4.PicGo配置OSS"></a>4.PicGo配置OSS</h3><p><img src="https://typora-hzh.oss-cn-hangzhou.aliyuncs.com/PrivateBlogimage-20230221002723035.png" alt="image-20230221002723035" title="PicGo配置OSS"></p><p>这里的“设定存储路径”需要和上面Bucket新建的文件夹一致才能保证上传的图片至你想要的Bucket的文件夹。</p><h3 id="5-Typora配置PicGo"><a href="#5-Typora配置PicGo" class="headerlink" title="5.Typora配置PicGo"></a>5.Typora配置PicGo</h3><h4 id="5-1点击-文件》偏好设置"><a href="#5-1点击-文件》偏好设置" class="headerlink" title="5.1点击 文件》偏好设置"></a>5.1点击 文件》偏好设置</h4><p><img src="https://typora-hzh.oss-cn-hangzhou.aliyuncs.com/PrivateBlogimage-20230221002810710.png" alt="image-20230221002810710" title="偏好设置"></p><h5 id="5-2插入图片时选择”上传图片“，这样Typora插入的所有图片都会自动帮你上传到OSS了（选做，你也可以不设置这个，然后按照自己喜欢的方式选择）"><a href="#5-2插入图片时选择”上传图片“，这样Typora插入的所有图片都会自动帮你上传到OSS了（选做，你也可以不设置这个，然后按照自己喜欢的方式选择）" class="headerlink" title="5.2插入图片时选择”上传图片“，这样Typora插入的所有图片都会自动帮你上传到OSS了（选做，你也可以不设置这个，然后按照自己喜欢的方式选择）"></a>5.2插入图片时选择”上传图片“，这样Typora插入的所有图片都会自动帮你上传到OSS了（选做，你也可以不设置这个，然后按照自己喜欢的方式选择）</h5><p><img src="https://typora-hzh.oss-cn-hangzhou.aliyuncs.com/PrivateBlogimage-20230221002844959.png" alt="image-20230221002844959" title="自动上传图片"></p><h4 id="5-3配置PicGo-exe，路径是安装PicGo的路径，找到底下的PicGo-exe复制过来即可"><a href="#5-3配置PicGo-exe，路径是安装PicGo的路径，找到底下的PicGo-exe复制过来即可" class="headerlink" title="5.3配置PicGo.exe，路径是安装PicGo的路径，找到底下的PicGo.exe复制过来即可"></a>5.3配置PicGo.exe，路径是安装PicGo的路径，找到底下的PicGo.exe复制过来即可</h4><p><img src="https://typora-hzh.oss-cn-hangzhou.aliyuncs.com/PrivateBlogimage-20230221002943777.png" alt="image-20230221002943777" title="选择PicGo上传图片"></p><p>配置完成后可以点击”验证图片上传选项“进行验证一下。</p><h3 id="大功告成！"><a href="#大功告成！" class="headerlink" title="大功告成！"></a>大功告成！</h3>]]></content>
    
    
    <categories>
      
      <category>配置</category>
      
      <category>其它</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Typora</tag>
      
      <tag>PicGo</tag>
      
      <tag>OSS</tag>
      
      <tag>图床</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
